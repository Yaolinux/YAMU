#!/bin/bash

source_download() {
	_information $prefix "Téléchargement de la source"
	cd $build_arbo/$NAME/sources
	for i in "${URL[@]}"; 
	do
		case $i in
			http://*|https://*|ftp://*)
				wget -c $i
				if [[ $? != 0 ]]; then
					_warning $prefix "Le certificat de la source n'est pas correct."
					wget -c --no-check-certificate $i
				fi
				;;
			*)
				cp -rvf $basedir/$i $build_dir
				;;
		esac

		SRCNAME+=" ${i##*/}"
	done		
}

source_decompress() {
	_information $prefix "Décompression des sources"
	cd $build_arbo/$NAME/sources
	for tarball in ${SRCNAME[@]};
	do
		case $tarball in
			*.tar|*.tar.gz|*.tar.Z|*.tgz|*.tar.bz2|*.tbz2|*.tbz|*.tar.xz|*.txz|*.tar.lzma|*.tar.lz)
				tar xf $tarball -C $build_arbo/$NAME/build
				;;
			*)
				_warning $prefix "Fichier ou archive ${tarball} non pris en charge"
				;;

		esac
	done
}

source_postdecompress() {
	_information $prefix "Vérification des sources"
	cd $build_arbo/$NAME/sources
	for tarball in $TAR;
	do
		folder_pkg=$(tar tf $tarball | head -1)
	done
}

package_pack() {
	_information $prefix "Empaquetage du paquet"
	cd $package_dir
	_information $prefix "Création de l'arborescence du paquet"
	tar --no-same-owner -cf $NAME-$VERSION-$RELEASE.tar *
	tar -tf $NAME-$VERSION-$RELEASE.tar > .PACKTREE
	tar -rf $NAME-$VERSION-$RELEASE.tar .PACKTREE
	_information $prefix "Création de l'archive du paquet"
	zstd --rm $NAME-$VERSION-$RELEASE.tar
}

package_move_depot() {
	_information $prefix "Déplacement du binaire dans le dépot local"
	if [ ! -d $PKG_DEPOT/$NAME ]; then
		mkdir $PKG_DEPOT/$NAME
	else
		rm -rf $PKG_DEPOT/$NAME/*
	fi
	mv -fv $package_dir/$NAME-$VERSION-$RELEASE.tar.zst $PKG_DEPOT/$NAME
}

build_check() {
	_information $prefix "Vérification du fichier build"
	if [ -z $NAME ]; then _error $prefix "Variable NAME vide"; exit 100; fi
	if [ -z $VERSION ]; then _error $prefix "Variable VERSION vide"; exit 101; fi
	#[ -z $URL ] && _error $prefix "Variable URL vide"; exit 102
	if [ -z $RELEASE ]; then RELEASE=1; fi
	if [ -z $DEPENDS ]; then _information $prefix "Paquet sans dépendances"; fi
}


pkg_build() {
	build_init
	build_check
	source_download
	if [[ $? != 0 ]]; then
		_error $prefix "Merci de vérifier l'url de la source."
		exit 1
	fi
	source_decompress
	if [[ $? != 0 ]]; then
		_error $prefix "Merci de vérifier l'archive de la source."
		exit 2
	fi
	source_postdecompress
	if [[ $? != 0 ]]; then
		_error $prefix "Erreur sur la post décompression."
		exit 3
	fi
	cd $build_dir/
	if [[ $? != 0 ]]; then
		_error $prefix "Le dossier contentant les sources est inexistant."
		exit 4
	fi
	PACKDIR=$package_dir
	do_prepare
	if [[ $? != 0 ]]; then
		_error $prefix "Erreur sur la préparation de la recette. Merci de vérifier la fonction do_prepare."
		exit 5
	fi
	do_build
	if [[ $? != 0 ]]; then
		_error $prefix "Erreur sur la compilation de la recette. Merci de vérifier la fonction do_build."
		exit 6
	fi
	do_install
	if [[ $? != 0 ]]; then
		_error $prefix "Erreur sur l'installation du paquet. Merci de vérifier la fonction do_install."
		exit 7
	fi
	package_pack
	if [[ $? != 0 ]]; then
		_error $prefix "Erreur sur l'empaquetage du paquet."
		exit 8
	fi
	package_move_depot
	if [[ $? != 0 ]]; then
		_error $prefix "Impossible de déplacer le binaire dans le dépôt. Merci de verifier les droits"
		exit 9
	fi

}

build_init() {
	_information $prefix "Vérification des droits"
	if [ ! -d /var/pkg ]; then
		_error $prefix "Le dossier /var/pkg n'existe pas, merci de le créer"
		exit 10
	elif [  ! -w /var/pkg ]; then
		_error $prefix "Le dossier /var/pkg n''est pas inscriptible, merci de vérifier les droits"
		exit 11
	fi
	
	_information $prefix "Suppression des anciens dossiers"
	if [ -d "${build_arbo}/${NAME}" ];
	then
		rm -rf $build_arbo/$NAME/
	fi
	
	_information $prefix "Création des dossiers necessaire à la compilation"
	
	mkdir -pv $build_arbo/$NAME/
	mkdir -pv $build_arbo/$NAME/sources
	mkdir -pv $build_arbo/$NAME/build
	mkdir -pv $build_arbo/$NAME/package
	


}

help() {
	echo -e "Aide pour yambuild :"
	echo -e "--download ou -do : Permet de télécharger les sources et initalise l'arborescence de compilation"
	echo -e "--decompress ou -de : Décompresser les sources"
	echo -e "--prepare ou -p : Lance la fonction prepare du build"
	echo -e "--make ou -m : Lance la fonction make du build"
	echo -e "--check ou -c : Lance la fonction check du build"
	echo -e "--install ou -i : Lance la fonction install du build"
}

prefix="YAMBUILD"

basedir=$PWD/$1
buildfile=$1/build
option=$2

source yamutils
source $buildfile

SRCNAME=""
PKG_DEPOT="/var/pkg"
user_dir=$(echo $HOME)
build_arbo=$user_dir/yambuild
build_dir=$user_dir/yambuild/$NAME/build
package_dir=$user_dir/yambuild/$NAME/package

if [[ $user_dir == "/root" ]]; then
	_error $prefix "La compilation ne fait pas en root !"
	exit 9
fi

case $2 in
"--download" | "-do")
	build_init
	source_download
	;;
"--decompress" | "-de")
	source_decompress
	source_postdecompress
	;;
"--prepare" | "-p")
	do_prepare
	;;
"--make" | "-m")
	do_make
	;;
"--check" | "-c")
	do_check
	;;
"--install" | "-i")
	PACKDIR=/$build_arbo/package
	do_install
	;;
"--build" | "-b")
	pkg_build
	;;
*)
	help
	;;
esac
